// src/screens/UserSettings.js
import React, { useState } from 'react';
import styled from 'styled-components';
import { useDispatch, useSelector } from 'react-redux';
import { motion } from 'framer-motion';

// Components
import SectionTitle from '../components/SectionTitle';
import Button from '../components/Button';
import GlowingCard from '../components/GlowingCard';

const Container = styled.div`
  min-height: 100vh;
  width: 100%;
  background: ${props => props.theme.gradient || 'linear-gradient(to bottom, #87CEEB, #FFFFFF)'};
  padding: 24px;
`;

const Header = styled.div`
  margin-bottom: 32px;
`;

const UserInfoCard = styled(GlowingCard)`
  display: flex;
  align-items: center;
  margin-bottom: 32px;
`;

const UserAvatar = styled.div`
  width: 80px;
  height: 80px;
  border-radius: 50%;
  background: ${props => props.theme.primary || '#87CEEB'}30;
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: 2rem;
  margin-right: 16px;
`;

const UserInfo = styled.div`
  flex: 1;
`;

const UserName = styled.h2`
  margin: 0 0 4px 0;
  font-size: 1.4rem;
`;

const UserEmail = styled.p`
  margin: 0;
  color: ${props => props.theme.text?.secondary || '#666666'};
  font-size: 0.9rem;
`;

const UserZodiac = styled.div`
  display: flex;
  align-items: center;
  gap: 8px;
  margin-top: 8px;
  font-size: 0.9rem;
`;

const SettingSection = styled.div`
  margin-bottom: 32px;
`;

const SettingCard = styled(GlowingCard)`
  margin-bottom: 16px;
`;

const SettingRow = styled.div`
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 16px 0;
  border-bottom: 1px solid rgba(0, 0, 0, 0.05);
  
  &:last-child {
    border-bottom: none;
    padding-bottom: 0;
  }
  
  &:first-child {
    padding-top: 0;
  }
`;

const SettingLabel = styled.div`
  display: flex;
  flex-direction: column;
`;

const SettingTitle = styled.h3`
  margin: 0;
  font-size: 1rem;
  font-weight: 500;
`;

const SettingDescription = styled.p`
  margin: 4px 0 0 0;
  color: ${props => props.theme.text?.secondary || '#666666'};
  font-size: 0.8rem;
`;

const ToggleSwitch = styled.label`
  position: relative;
  display: inline-block;
  width: 54px;
  height: 28px;
  flex-shrink: 0;
`;

const ToggleInput = styled.input`
  opacity: 0;
  width: 0;
  height: 0;
  
  &:checked + span {
    background-color: ${props => props.theme.primary || '#87CEEB'};
  }
  
  &:checked + span:before {
    transform: translateX(26px);
  }
  
  &:focus + span {
    box-shadow: 0 0 1px ${props => props.theme.primary || '#87CEEB'};
  }
`;

const ToggleSlider = styled.span`
  position: absolute;
  cursor: pointer;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background-color: #ccc;
  transition: .4s;
  border-radius: 34px;
  
  &:before {
    position: absolute;
    content: "";
    height: 20px;
    width: 20px;
    left: 4px;
    bottom: 4px;
    background-color: white;
    transition: .4s;
    border-radius: 50%;
  }
`;

const VersionInfo = styled.div`
  text-align: center;
  font-size: 0.8rem;
  color: ${props => props.theme.text?.secondary || '#666666'};
  margin-top: 48px;
`;

const LogoutButton = styled(Button)`
  width: 100%;
  margin-top: 16px;
`;

const UserSettings = () => {
  const user = useSelector(state => state.user);
  const [highContrastMode, setHighContrastMode] = useState(false);
  const [notificationsEnabled, setNotificationsEnabled] = useState(true);
  const [offlineMode, setOfflineMode] = useState(false);
  const dispatch = useDispatch();
  
  const handleHighContrastToggle = () => {
    const newValue = !highContrastMode;
    setHighContrastMode(newValue);
    
    // In a real app, we would dispatch an action to update the Redux store
    // and persist the setting to local storage
    // dispatch(setHighContrastMode(newValue));
    
    // For demo purposes, we'll just update the local state
    localStorage.setItem('highContrastMode', JSON.stringify(newValue));
  };
  
  const handleOfflineModeToggle = () => {
    const newValue = !offlineMode;
    setOfflineMode(newValue);
    
    // In a real app, we would configure cache settings
    // to optimize offline performance
    localStorage.setItem('offlineMode', JSON.stringify(newValue));
  };
  
  const handleLogout = () => {
    // In a real app, we would clear authentication tokens
    // and dispatch an action to reset the user state
    localStorage.removeItem('authToken');
    window.location.href = '/';
  };
  
  // Get zodiac sign emoji
  const getZodiacEmoji = (sign) => {
    const zodiacEmojis = {
      aries: '‚ôà',
      taurus: '‚ôâ',
      gemini: '‚ôä',
      cancer: '‚ôã',
      leo: '‚ôå',
      virgo: '‚ôç',
      libra: '‚ôé',
      scorpio: '‚ôè',
      sagittarius: '‚ôê',
      capricorn: '‚ôë',
      aquarius: '‚ôí',
      pisces: '‚ôì'
    };
    
    return zodiacEmojis[sign?.toLowerCase()] || 'üåü';
  };
  
  return (
    <Container>
      <Header>
        <SectionTitle>Settings</SectionTitle>
      </Header>
      
      <UserInfoCard>
        <UserAvatar>üßò</UserAvatar>
        <UserInfo>
          <UserName>Cosmic Explorer</UserName>
          <UserEmail>cosmic@example.com</UserEmail>
          <UserZodiac>
            <span>{getZodiacEmoji(user.zodiacSign)}</span>
            <span>{user.zodiacSign || 'Aquarius'}</span>
          </UserZodiac>
        </UserInfo>
      </UserInfoCard>
      
      <SettingSection>
        <SectionTitle>Preferences</SectionTitle>
        
        <SettingCard>
          <SettingRow>
            <SettingLabel>
              <SettingTitle>High Contrast Mode</SettingTitle>
              <SettingDescription>Enhances visibility with stronger colors and contrast</SettingDescription>
            </SettingLabel>
            <ToggleSwitch>
              <ToggleInput 
                type="checkbox" 
                checked={highContrastMode}
                onChange={handleHighContrastToggle}
              />
              <ToggleSlider />
            </ToggleSwitch>
          </SettingRow>
          
          <SettingRow>
            <SettingLabel>
              <SettingTitle>Notifications</SettingTitle>
              <SettingDescription>Receive alerts for cosmic events and rituals</SettingDescription>
            </SettingLabel>
            <ToggleSwitch>
              <ToggleInput 
                type="checkbox" 
                checked={notificationsEnabled}
                onChange={handleNotificationsToggle}
              />
              <ToggleSlider />
            </ToggleSwitch>
          </SettingRow>
          
          <SettingRow>
            <SettingLabel>
              <SettingTitle>Offline Mode</SettingTitle>
              <SettingDescription>Access core features without an internet connection</SettingDescription>
            </SettingLabel>
            <ToggleSwitch>
              <ToggleInput 
                type="checkbox" 
                checked={offlineMode}
                onChange={handleOfflineModeToggle}
              />
              <ToggleSlider />
            </ToggleSwitch>
          </SettingRow>
        </SettingCard>
      </SettingSection>
      
      <SettingSection>
        <SectionTitle>Account</SectionTitle>
        
        <SettingCard>
          <SettingRow>
            <SettingLabel>
              <SettingTitle>Birth Details</SettingTitle>
              <SettingDescription>Update your birth date, time, and location</SettingDescription>
            </SettingLabel>
            <Button variant="secondary" size="small">Edit</Button>
          </SettingRow>
          
          <SettingRow>
            <SettingLabel>
              <SettingTitle>Email Address</SettingTitle>
              <SettingDescription>Change your email or notification preferences</SettingDescription>
            </SettingLabel>
            <Button variant="secondary" size="small">Change</Button>
          </SettingRow>
          
          <SettingRow>
            <SettingLabel>
              <SettingTitle>Password</SettingTitle>
              <SettingDescription>Update your account password</SettingDescription>
            </SettingLabel>
            <Button variant="secondary" size="small">Reset</Button>
          </SettingRow>
        </SettingCard>
        
        <SettingCard>
          <SettingRow>
            <SettingLabel>
              <SettingTitle>Export Data</SettingTitle>
              <SettingDescription>Download your journal entries and insights</SettingDescription>
            </SettingLabel>
            <Button variant="secondary" size="small">Export</Button>
          </SettingRow>
          
          <SettingRow>
            <SettingLabel>
              <SettingTitle>Delete Account</SettingTitle>
              <SettingDescription>Permanently remove your account and all data</SettingDescription>
            </SettingLabel>
            <Button variant="secondary" size="small">Delete</Button>
          </SettingRow>
        </SettingCard>
        
        <LogoutButton variant="primary" onClick={handleLogout}>
          Log Out
        </LogoutButton>
      </SettingSection>
      
      <VersionInfo>
        SoulSync v1.0.0
      </VersionInfo>
    </Container>
  );
};

export default UserSettings;