// src/screens/Onboarding.js
import React, { useState } from 'react';
import styled from 'styled-components';
import { motion, AnimatePresence } from 'framer-motion';
import { useDispatch } from 'react-redux';
import { setUser, setIsOnboarded } from '../store/userSlice';
import Button from '../components/Button';

const OnboardingContainer = styled.div`
  min-height: 100vh;
  width: 100%;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  padding: 24px;
  background: ${props => props.theme.gradient || 'linear-gradient(to bottom, #87CEEB, #FFFFFF)'};
`;

const OnboardingCard = styled(motion.div)`
  width: 100%;
  max-width: 500px;
  background: rgba(255, 255, 255, 0.2);
  backdrop-filter: blur(10px);
  border-radius: 24px;
  padding: 32px;
  box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
  text-align: center;
  position: relative;
  overflow: hidden;
`;

const StepIndicator = styled.div`
  display: flex;
  justify-content: center;
  gap: 8px;
  margin-bottom: 24px;
`;

const StepDot = styled.div`
  width: 8px;
  height: 8px;
  border-radius: 50%;
  background: ${props => props.active ? props.theme.primary || '#87CEEB' : 'rgba(0, 0, 0, 0.1)'};
  transition: background 0.3s ease;
`;

const Title = styled.h1`
  margin-bottom: 16px;
  font-size: 2rem;
`;

const Subtitle = styled.p`
  margin-bottom: 32px;
  color: ${props => props.theme.text?.secondary || '#666666'};
`;

const FormGroup = styled.div`
  margin-bottom: 24px;
  width: 100%;
  text-align: left;
`;

const Label = styled.label`
  display: block;
  margin-bottom: 8px;
  font-weight: 500;
`;

const Input = styled.input`
  width: 100%;
  padding: 16px;
  border: 1px solid rgba(0, 0, 0, 0.1);
  border-radius: 12px;
  font-family: 'Montserrat', sans-serif;
  font-size: 1rem;
  outline: none;
  
  &:focus {
    border-color: ${props => props.theme.primary || '#87CEEB'};
  }
`;

const TextArea = styled.textarea`
  width: 100%;
  padding: 16px;
  border: 1px solid rgba(0, 0, 0, 0.1);
  border-radius: 12px;
  font-family: 'Montserrat', sans-serif;
  font-size: 1rem;
  outline: none;
  height: 120px;
  resize: none;
  
  &:focus {
    border-color: ${props => props.theme.primary || '#87CEEB'};
  }
`;

const ButtonContainer = styled.div`
  display: flex;
  justify-content: space-between;
  margin-top: 16px;
`;

const CircleAnimation = styled(motion.div)`
  position: absolute;
  width: 300px;
  height: 300px;
  border-radius: 50%;
  border: 2px solid ${props => props.theme.primary || '#87CEEB'};
  opacity: 0.2;
`;

const WelcomeAnimation = styled(motion.div)`
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  height: 300px;
`;

const TreeOfLifeSVG = styled(motion.svg)`
  width: 200px;
  height: 200px;
`;

const Onboarding = ({ onComplete }) => {
  const [step, setStep] = useState(1);
  const [formData, setFormData] = useState({
    birthDate: '',
    birthTime: '',
    birthPlace: '',
    mood: '',
    intention: ''
  });
  const dispatch = useDispatch();
  
  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({ ...prev, [name]: value }));
  };
  
  const handleNext = () => {
    if (step < 3) {
      setStep(step + 1);
    } else {
      completeOnboarding();
    }
  };
  
  const handleBack = () => {
    if (step > 1) {
      setStep(step - 1);
    }
  };
  
  const completeOnboarding = () => {
    // In a real app, we'd send this data to the backend to calculate zodiac sign
    // For now, we'll hardcode a random sign for demo purposes
    const zodiacSigns = [
      'Aries', 'T